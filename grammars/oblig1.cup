package oblig1parser;
import java_cup.runtime.*;
import syntaxtree.*;
import syntaxtree.declaration.*;
import syntaxtree.statement.*;
import syntaxtree.expression.*;
import syntaxtree.expression.variable.*;
import syntaxtree.expression.literal.*;
import syntaxtree.expression.operator.*;
import syntaxtree.expression.operator.logic.*;
import syntaxtree.expression.operator.arithmetic.*;
import syntaxtree.expression.operator.relation.*;
import java.util.*;

parser code {:

:};

/////////////////////////////////////////////////////////////////////////
//                              TERMINALS                             //
///////////////////////////////////////////////////////////////////////
/* Types */
terminal String                 ID;
terminal String                 FLOAT;
terminal String                 INT;
terminal String                 BOOL;
terminal String                 STRING;

/* Literals */
terminal String                 STRING_LITERAL;
terminal String                 INT_LITERAL;
terminal String                 FLOAT_LITERAL;
terminal String                 TRUE;
terminal String                 FALSE;
terminal String                 NULL;

/* Relation operators */
terminal                        LESS_THAN;
terminal                        LESS_EQUAL;
terminal                        GREATER_THAN;
terminal                        GREATER_EQUAL;
terminal                        EQUAL;
terminal                        NOT_EQUAL;

/* Aritmethic operators */
terminal                        PLUS;
terminal                        MINUS;
terminal                        MULTIPLY;
terminal                        DIVIDE;
terminal                        EXPONENT;

/* Logical operators */
terminal                        OR;
terminal                        AND;
terminal                        NOT;

/* Reserved words */
terminal                        CLASS;
terminal                        RETURN;
terminal                        NEW;
terminal                        PROC;
terminal                        RET;
terminal                        VAR;
terminal                        IF;
terminal                        THEN;
terminal                        ELSE;
terminal                        WHILE;
terminal                        DO;

/* Other terimnals */
terminal                        LBRACK;
terminal                        RBRACK;
terminal                        LPAR;
terminal                        RPAR;
terminal                        SEMI;
terminal                        COMMA;
terminal                        ASSIGN;
terminal                        DOT;

/////////////////////////////////////////////////////////////////////////
//                            NON TERMINALS                           //
///////////////////////////////////////////////////////////////////////
non terminal Program            program;

/* Lists */
non terminal List<Decl>         opt_decl_list, decl_list;
non terminal List<Decl>         opt_var_decl_list, var_decl_list;
non terminal List<ParamDecl>    opt_param_decl_list, param_decl_list;
non terminal List<Stmt>         opt_stmt_list, stmt_list;
non terminal List<ActualParam>  opt_actual_param_list, actual_param_list;

/* Declarations */
non terminal ParamDecl          param_decl;
non terminal Decl               decl;
non terminal Decl               class_decl;
non terminal Decl               proc_decl;
non terminal Decl               var_decl;

/* Statements  */
non terminal Stmt               stmt;
non terminal Stmt               assign_stmt;
non terminal Stmt               if_stmt;
non terminal Stmt               while_stmt;
non terminal Stmt               return_stmt;
non terminal Stmt               call_stmt;

/* Expressions */
non terminal Expression         exp, literal, var;

/* Other */
non terminal ElsePart           else_part;
non terminal String             type;
non terminal ActualParam        actual_param;

/* Precedence */
precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc LESS_THAN, LESS_EQUAL, GREATER_THAN, GREATER_EQUAL, EQUAL, NOT_EQUAL;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE;
precedence right EXPONENT;
precedence left DOT;

/////////////////////////////////////////////////////////////////////////
//                             THE GRAMMAR                            //
///////////////////////////////////////////////////////////////////////
program                 ::= decl_list:dl
                            {: RESULT = new Program(dl); :};

////////////////////
//  Declarations //
//////////////////
opt_decl_list           ::=     {: RESULT = new LinkedList<Decl>(); :}
                        |   decl_list:dl {: RESULT = dl; :};

decl_list               ::= decl:d {: List<Decl> l = new LinkedList<Decl>();
                                      l.add(d);
                                      RESULT = l; :}
                        |   decl_list:l decl:d
                                {: l.add(d); RESULT = l; :};

decl                    ::= class_decl:sd   {: RESULT = sd; :}
                        |   proc_decl:pd    {: RESULT = pd; :}
                        |   var_decl:vd     {: RESULT = vd; :};

class_decl              ::= CLASS ID:name LBRACK opt_var_decl_list:l RBRACK
                                {: RESULT = new ClassDecl(name,l); :};

opt_var_decl_list       ::= {: RESULT = new LinkedList<Decl>(); :}
                        |   var_decl_list:vdl {: RESULT = vdl; :};

var_decl_list           ::= var_decl:vd {: List<Decl> l = new LinkedList<Decl>();
                                           l.add(vd);
                                           RESULT = l; :}
                        |   var_decl_list:vdl var_decl:vd
                                {: vdl.add(vd); RESULT = vdl; :};

var_decl                ::= VAR type:typename ID:name SEMI
                                {: RESULT = new VarDecl(typename, name); :};

proc_decl               ::= PROC RET type:t ID:name LPAR opt_param_decl_list:l1 RPAR LBRACK opt_decl_list:l2 opt_stmt_list:l3 RBRACK
                                {: RESULT = new FunctionDecl(t, name, l1, l2, l3); :}
                        |   PROC ID:name LPAR opt_param_decl_list:l1 RPAR LBRACK opt_decl_list:l2 opt_stmt_list:l3 RBRACK
                                {: RESULT = new ProcedureDecl(name, l1, l2, l3); :};

opt_param_decl_list     ::=     {: RESULT = new LinkedList<ParamDecl>(); :}
                        |   param_decl_list:l {: RESULT = l; :};

param_decl_list         ::= param_decl:pd {: List<ParamDecl> l = new LinkedList<ParamDecl>();
                                               l.add(pd);
                                               RESULT = l; :}
                        |   param_decl_list:l COMMA param_decl:d
                                {: l.add(d); RESULT = l; :};

param_decl              ::= type:t ID:name
                                {: RESULT = new ParamDecl(t,name); :}
                        |   VAR type:t ID:name
                                {: RESULT = new VarParamDecl(t,name); :};

////////////////////
//  Statements   //
//////////////////
opt_stmt_list           ::=     {: RESULT = new LinkedList<Stmt>(); :}
                        |   stmt_list:l {: RESULT = l; :};

stmt_list               ::= stmt:s {: List<Stmt> l = new LinkedList<Stmt>();
                                      l.add(s);
                                      RESULT = l; :}
                        |   stmt_list:sl stmt:s {: sl.add(s); RESULT = sl; :};

stmt                    ::= assign_stmt:s SEMI  {: RESULT = s; :}
                        |   if_stmt:s           {: RESULT = s; :}
                        |   while_stmt:s        {: RESULT = s; :}
                        |   return_stmt:s SEMI  {: RESULT = s; :}
                        |   call_stmt:s SEMI    {: RESULT = s; :};

assign_stmt             ::= exp:e1 ASSIGN exp:e2  {: RESULT = new AssignmentStmt(e1, e2); :};

if_stmt                 ::= IF exp:e THEN LBRACK opt_stmt_list:l1 RBRACK else_part:l2
                                {: RESULT = new IfElseStmt(e, l1, l2); :};

else_part               ::=     {: RESULT = new ElsePart(new LinkedList<Stmt>()); :}
                        |   ELSE LBRACK opt_stmt_list:l RBRACK
                                {: RESULT = new ElsePart(l); :};

while_stmt              ::= WHILE exp:e DO LBRACK opt_stmt_list:l RBRACK
                                {: RESULT = new WhileStmt(e, l); :};

return_stmt             ::= RETURN exp:e   {: RESULT = new ReturnStmt(e); :}
                        |   RETURN         {: RESULT = new ReturnStmt(new EmptyExpression()); :};

call_stmt               ::= ID:name LPAR opt_actual_param_list:l RPAR
                                   {: RESULT = new CallStmt(l, name); :};

/////////////////////
//  Actual param  //
///////////////////
opt_actual_param_list   ::= {: RESULT = new LinkedList<ActualParam>(); :}
                        |   actual_param_list:l {: RESULT = l; :};

actual_param_list       ::= actual_param:ap {: List<ActualParam> l = new LinkedList<ActualParam>();
                                               l.add(ap);
                                               RESULT = l; :}
                        |   actual_param_list:l COMMA actual_param:p
                                {: l.add(p); RESULT = l; :};

actual_param            ::= VAR var:v   {: RESULT = new ActualParam(v); :}
                        |   exp:e       {: RESULT = new ActualParam(e); :};

////////////////////
//  Expressions  //
//////////////////
exp                     ::= exp:e1 OR exp:e2 {: RESULT = new OperatorExpression(new OrLogOp(), e1, e2); :}
                        |   exp:e1 AND exp:e2 {: RESULT = new OperatorExpression(new AndLogOp(), e1, e2); :}
                        |   exp:e1 PLUS exp:e2 {: RESULT = new OperatorExpression(new PlusAritOp(), e1, e2); :}
                        |   exp:e1 MINUS exp:e2 {: RESULT = new OperatorExpression(new MinusAritOp(), e1, e2); :}
                        |   exp:e1 LESS_THAN exp:e2 {: RESULT = new OperatorExpression(new LessThanRelOp(), e1, e2); :}
                        |   exp:e1 LESS_EQUAL exp:e2 {: RESULT = new OperatorExpression(new LessEqualRelOp(), e1, e2); :}
                        |   exp:e1 GREATER_THAN exp:e2 {: RESULT = new OperatorExpression(new GreaterThanRelOp(), e1, e2); :}
                        |   exp:e1 GREATER_EQUAL exp:e2 {: RESULT = new OperatorExpression(new GreaterEqualRelOp(), e1, e2); :}
                        |   exp:e1 EQUAL exp:e2 {: RESULT = new OperatorExpression(new EqualRelOp(), e1, e2); :}
                        |   exp:e1 NOT_EQUAL exp:e2 {: RESULT = new OperatorExpression(new NotEqualRelOp(), e1, e2); :}
                        |   exp:e1 EXPONENT:ex exp:e2 {: RESULT = new OperatorExpression(new ExponentAritOp(), e1, e2); :}
                        |   exp:e1 MULTIPLY exp:e2 {: RESULT = new OperatorExpression(new MultiplyAritOp(), e1, e2); :}
                        |   exp:e1 DIVIDE exp:e2 {: RESULT = new OperatorExpression(new DivideAritOp(), e1, e2); :}
                        |   exp:e1 DOT exp:e2 {: RESULT = new DotExpression(e1, e2); :}
                        |   literal:l {: RESULT = l; :}
                        |   var:v {: RESULT = v; :}
                        |   NOT exp:e {: RESULT = new NotExpression(e); :}
                        |   NEW ID:name {: RESULT = new NewExpression(name); :}
                        |   call_stmt:cs {: RESULT = new CallExpression(cs); :}
                        |   LPAR exp:e RPAR {: RESULT = e; :};

var                     ::= ID:name {: RESULT = new Variable(name); :};
                        

////////////////////
//  Types        //
//////////////////
type                    ::= FLOAT   {: RESULT = "float"; :}
                        |   INT     {: RESULT = "int"; :}
                        |   STRING  {: RESULT = "string"; :}
                        |   BOOL    {: RESULT = "bool"; :}
                        |   ID:name {: RESULT = name; :};

////////////////////
//  Literals     //
//////////////////
literal                 ::= INT_LITERAL:s       {: RESULT = new IntLiteral(s); :}
                        |   FLOAT_LITERAL:s     {: RESULT = new FloatLiteral(s); :}
                        |   STRING_LITERAL:s    {: RESULT = new StringLiteral(s); :}
                        |   TRUE                {: RESULT = new TrueLiteral("true"); :}
                        |   FALSE               {: RESULT = new FalseLiteral("false"); :}
                        |   NULL                {: RESULT = new NullLiteral("null"); :};



